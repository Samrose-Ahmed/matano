"use strict";(self.webpackChunk_matano_website=self.webpackChunk_matano_website||[]).push([[2495],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=o,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},73919:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={title:"Remote cache",sidebar_position:3},i=void 0,c={unversionedId:"detections/remote-cache",id:"detections/remote-cache",title:"Remote cache",description:"You can use a remote cache in your detections to persist and retrieve values by a key. This gives you a powerful way to be able to retain context and perform correlation across your detections.",source:"@site/docs/detections/remote-cache.md",sourceDirName:"detections",slug:"/detections/remote-cache",permalink:"/docs/detections/remote-cache",draft:!1,editUrl:"https://github.com/matanolabs/matano/tree/main/website/docs/detections/remote-cache.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Remote cache",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Importing from Sigma rules",permalink:"/docs/detections/importing-from-sigma-rules"},next:{title:"Realtime alerting",permalink:"/docs/detections/alerting/"}},s={},l=[{value:"Types supported by the remote cache",id:"types-supported-by-the-remote-cache",level:2},{value:"Integer (counter)",id:"integer-counter",level:4},{value:"String set",id:"string-set",level:4},{value:"String",id:"string",level:4},{value:"Using the remote cache",id:"using-the-remote-cache",level:2},{value:"Time to live",id:"time-to-live",level:3},{value:"Adding a value to the cache",id:"adding-a-value-to-the-cache",level:3},{value:"Getting a value from the cache",id:"getting-a-value-from-the-cache",level:3},{value:"Removing a value from the cache",id:"removing-a-value-from-the-cache",level:3},{value:"Incrementing/decrementing an integer counter",id:"incrementingdecrementing-an-integer-counter",level:3},{value:"Appending to and removing from a string set",id:"appending-to-and-removing-from-a-string-set",level:3},{value:"Notes",id:"notes",level:2},{value:"Examples",id:"examples",level:2}],u={toc:l};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can use a ",(0,o.kt)("em",{parentName:"p"},"remote cache")," in your detections to persist and retrieve values by a key. This gives you a powerful way to be able to retain context and perform correlation across your detections."),(0,o.kt)("h2",{id:"types-supported-by-the-remote-cache"},"Types supported by the remote cache"),(0,o.kt)("p",null,"You can store the following types in the remote cache:"),(0,o.kt)("h4",{id:"integer-counter"},"Integer (counter)"),(0,o.kt)("p",null,"You can store integers to keep track of counters. You can set and get these counters, as well as atomically increment or decrement them."),(0,o.kt)("h4",{id:"string-set"},"String set"),(0,o.kt)("p",null,"String sets track unique collections of strings. Use this to append values that you want to track."),(0,o.kt)("h4",{id:"string"},"String"),(0,o.kt)("p",null,"You can also directly store strings in the cache."),(0,o.kt)("h2",{id:"using-the-remote-cache"},"Using the remote cache"),(0,o.kt)("p",null,"To use the remote cache in your detection, import the remote_cache and instantiate it with a namespace:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from detection import remote_cache\n\nuser_ips = remote_cache("UserIp")\n')),(0,o.kt)("p",null,"The remote cache implements ",(0,o.kt)("inlineCode",{parentName:"p"},"dict"),"-like methods, so in your Python code, you can treat it like a Python dictionary."),(0,o.kt)("h3",{id:"time-to-live"},"Time to live"),(0,o.kt)("p",null,"You can specify a Time to Live (TTL), in seconds, for cache entries to expire when instantiating the cache:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'user_ips = remote_cache("UserIp", ttl=86400)\n')),(0,o.kt)("p",null,"If you don't specify a TTL, a default TTL of 3600 seconds (1 hour) is used."),(0,o.kt)("h3",{id:"adding-a-value-to-the-cache"},"Adding a value to the cache"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'users_ips = remote_cache("UserIp")\nusers_ips["john@example.com"] = set("1.1.1.1")\n')),(0,o.kt)("h3",{id:"getting-a-value-from-the-cache"},"Getting a value from the cache"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'users_ips = remote_cache("UserIp")\nuser_ip = users_ips["john@example.com"]\nuser_ip = users_ips.get("john@example.com")\n')),(0,o.kt)("h3",{id:"removing-a-value-from-the-cache"},"Removing a value from the cache"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'users_ips = remote_cache("UserIp")\ndel users_ips["john@example.com"]\n')),(0,o.kt)("h3",{id:"incrementingdecrementing-an-integer-counter"},"Incrementing/decrementing an integer counter"),(0,o.kt)("p",null,"The remote cache provides methods to atomically increment or decrement an integer value in a single operation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'user_failure_count = remote_cache("UserFailure")\n\nuser_failure_count.increment_counter("john@example.com")\nuser_failure_count.increment_counter("john@example.com", 10) # optional value to increment by\n\nuser_failure_count.decrement_counter("john@example.com")\nuser_failure_count.decrement_counter("john@example.com", 10) # optional value to decrement by\n')),(0,o.kt)("h3",{id:"appending-to-and-removing-from-a-string-set"},"Appending to and removing from a string set"),(0,o.kt)("p",null,"The remote cache provides methods to atomically add or remove an item from a string set in a single operation. You can append or remove a single string by passing a string or multiple strings by passing an iterable (e.g ",(0,o.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"set"),", etc.) of strings."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'users_ips = remote_cache("UserIp")\n\n# provide a string or iterable\nusers_ips.add_to_string_set("john@example.com", "1.1.1.1")\nusers_ips.add_to_string_set("john@example.com", ["1.1.1.1", "8.8.8.8"])\nusers_ips.remove_from_string_set("john@example.com", "1.1.1.1")\nusers_ips.remove_from_string_set("john@example.com", {"1.1.1.1", "8.8.8.8"})\n')),(0,o.kt)("h2",{id:"notes"},"Notes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The remote cache is backed by a DynamoDB table."),(0,o.kt)("li",{parentName:"ul"},"The remote cache is eventually consistent. Do not rely on it for situations where you need strict in order guarantees or updates within short periods of time.")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"The following is an example detection using the remote cache with a counter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from detection import remote_cache\n\n# an hourly cache\nerrors_count = remote_cache("access_denied", ttl=3600)\nfailure_threshold = 15\n\ndef detect(record):\n    if record.get(\'aws\', {}).get("cloudtrail", {}).get("error_code") == \'AccessDenied\':\n        # A unique key on the user name\n        key = record.get("user", {}).get("name")\n\n        # Increment the counter and alert if exceeds a threshold\n        error_count = errors_count.increment_counter(key)\n        if error_count >= failure_threshold:\n            del errors_count[key]\n            return True\n')),(0,o.kt)("p",null,"The following is an example detection using the remote cache with a string set."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from detection import remote_cache\n\n# a weekly cache\nusers_ips = remote_cache(\"user_ip\", ttl=86400 * 7)\n\ndef detect(record):\n    if record.get('event', {}).get('action') == 'ConsoleLogin' and\n        record.get('event', {}).get('outcome', {}) == 'success':\n        # A unique key on the user name\n        key = record.get(\"user\", {}).get(\"name\")\n\n        # Alert on new IP\n        user_ips = users_ips.add_to_string_set(key)\n        if len(user_ips) > 1:\n            del users_ips[key]\n            return True\n")))}m.isMDXComponent=!0}}]);