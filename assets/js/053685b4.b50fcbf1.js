"use strict";(self.webpackChunk_matano_website=self.webpackChunk_matano_website||[]).push([[4609],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),g=a,d=m["".concat(s,".").concat(g)]||m[g]||p[g]||r;return n?o.createElement(d,l(l({ref:t},c),{},{components:n})):o.createElement(d,l({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6986:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var o=n(87462),a=(n(67294),n(3905));const r={title:"Log source configuration",sidebar_position:4},l=void 0,i={unversionedId:"log-sources/configuration",id:"log-sources/configuration",title:"Log source configuration",description:"Configuring log sources",source:"@site/docs/log-sources/configuration.md",sourceDirName:"log-sources",slug:"/log-sources/configuration",permalink:"/docs/log-sources/configuration",draft:!1,editUrl:"https://github.com/matanolabs/matano/tree/main/website/docs/log-sources/configuration.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Log source configuration",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Transformation",permalink:"/docs/log-sources/transformation"},next:{title:"Log source schema",permalink:"/docs/log-sources/schema"}},s={},u=[{value:"Configuring log sources",id:"configuring-log-sources",level:2},{value:"Log source configuration file",id:"log-source-configuration-file",level:3},{value:"Fields",id:"fields",level:4},{value:"Creating multiple tables from a log source",id:"creating-multiple-tables-from-a-log-source",level:2},{value:"Table configuration file",id:"table-configuration-file",level:3},{value:"Sharing log",id:"sharing-log",level:4},{value:"Table selection",id:"table-selection",level:3},{value:"Expression input",id:"expression-input",level:4},{value:"Expression output",id:"expression-output",level:4},{value:"Example",id:"example",level:4}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"configuring-log-sources"},"Configuring log sources"),(0,a.kt)("p",null,"To create a log source, create a directory under the ",(0,a.kt)("inlineCode",{parentName:"p"},"log_sources")," subdirectory in your Matano directory and create a file named ",(0,a.kt)("inlineCode",{parentName:"p"},"log_source.yml"),". The directory structure is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"my-matano-dir/\n\u2514\u2500\u2500 log_sources/\n    \u2514\u2500\u2500 aws_cloudtrail/\n        \u2514\u2500\u2500 log_source.yml\n")),(0,a.kt)("h3",{id:"log-source-configuration-file"},"Log source configuration file"),(0,a.kt)("p",null,"The configuration for a log source lives in a YAML file named ",(0,a.kt)("inlineCode",{parentName:"p"},"log_source.yml"),". The file has the following fields."),(0,a.kt)("h4",{id:"fields"},"Fields"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'# The unique name of the log source.\nname: "aws_cloudtrail"\n\n# Properties for managed log sources\nmanaged:\n  # The identifier of the managed log source\n  type: "AWS_CLOUDTRAIL"\n  # Map of string values for managed log source configuration\n  properties: {}\n\ningest:\n  s3_source:\n    # Name of existing S3 Bucket to use as a source\n    bucket_name: "my-bucket"\n    # Object key prefix for existing S3 source\n    key_prefix: "my-prefix"\n\n  # (Multi table log sources only) Used for mapping incoming data\n  # to the appropriate table at runtime.\n  select_table_from_payload_metadata: |\n    if match(.__metadata.s3.key, r\'Digest\') { "digest" } else { "default" }\n\n# Defines the schema for a log source.\nschema:\n  ecs_field_names:\n    - event\n    # use dotted path to select nested fields\n    - user.id\n  # List of custom schema fields in Apache Iceberg format.\n  fields:\n    - name: aws\n      type:\n        type: struct\n        fields: []\n\n# The VRL expression to transform your data.\ntransform: |\n  if .json.eventTime != null {\n      .ts = to_timestamp!(.json.eventTime, "milliseconds")\n  }\n')),(0,a.kt)("h2",{id:"creating-multiple-tables-from-a-log-source"},"Creating multiple tables from a log source"),(0,a.kt)("p",null,"By default, a log source will generate a single table with the same name as the log source."),(0,a.kt)("p",null,"Matano supports creating multiple Matano tables from a single log source."),(0,a.kt)("p",null,"To configure multiple tables from a log source, create a ",(0,a.kt)("inlineCode",{parentName:"p"},"tables/")," subdirectory in your log source directory. For example, if you have the log source ",(0,a.kt)("inlineCode",{parentName:"p"},"aws_cloudtrail"),", your directory structure would be as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"my-matano-dir/\n\u2514\u2500\u2500 log_sources/\n    \u2514\u2500\u2500 aws_cloudtrail/\n        \u2514\u2500\u2500 tables/\n            \u251c\u2500\u2500 default.yml\n            \u2514\u2500\u2500 digest.yml\n")),(0,a.kt)("p",null,"The files named ",(0,a.kt)("inlineCode",{parentName:"p"},"default.yml")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"digest.yml")," are ",(0,a.kt)("em",{parentName:"p"},"table configuration files"),"."),(0,a.kt)("h3",{id:"table-configuration-file"},"Table configuration file"),(0,a.kt)("p",null,"The table configuration file is a YAML file with the following structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'# optional, if omitted will use the log source name\nname: "dns"\n\n# optional, same as in `log_source.yml`\n# will be merged with schema in `log_source.yml`\nschema:\n  fields:\n    - name: custom_field\n      type: string\n\n# optional, same as in `log_source.yml\n# will be merged with schema in `log_source.yml`\ntransform: |\n  if .ts != null {\n      .event.created = .ts\n  }\n')),(0,a.kt)("h4",{id:"sharing-log"},"Sharing log"),(0,a.kt)("p",null,"Table level configurations 'inherit' from log source level configurations defined in the corresponding ",(0,a.kt)("inlineCode",{parentName:"p"},"log_source.yml")," and both log source level and table level configurations will be merged. You can use this to share properties and logic common to all tables within a log source while applying custom properties to each table."),(0,a.kt)("p",null,"The name defined in a table configuration will be combined with the log source name to form the final Matano table name. For example, a log source named ",(0,a.kt)("inlineCode",{parentName:"p"},"zeek")," with a table ",(0,a.kt)("inlineCode",{parentName:"p"},"dns")," will result in a Matano table named ",(0,a.kt)("inlineCode",{parentName:"p"},"zeek_dns"),"."),(0,a.kt)("h3",{id:"table-selection"},"Table selection"),(0,a.kt)("p",null,"When Matano ingests data for a log source with multiple tables, it will route the data to the correct table based on the incoming data's metadata. You provide this logic to Matano using a VRL expression that Matano evaluates on incoming data's metadata at runtime."),(0,a.kt)("p",null,"To define the table selection VRL expression use the ",(0,a.kt)("inlineCode",{parentName:"p"},"ingest.select_table_from_payload_metadata")," key in your ",(0,a.kt)("strong",{parentName:"p"},"log_source.yml"),"."),(0,a.kt)("h4",{id:"expression-input"},"Expression input"),(0,a.kt)("p",null,"Your VRL expression is passed a ",(0,a.kt)("inlineCode",{parentName:"p"},"__metadata")," key with the following structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "__metadata": {\n    "s3": {\n      "bucket": "my-bucket",\n      "key": "my/key",\n      "size": 123456 // integer bytes\n    }\n  }\n}\n')),(0,a.kt)("h4",{id:"expression-output"},"Expression output"),(0,a.kt)("p",null,"The expression should return a string containing the table name that the data maps to."),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("p",null,"For example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"aws_cloudtrail")," log source has 3 tables configured. The following VRL expression is defined to select the appropriate table from the uploaded file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'# log_source.yml\n\nselect_table_from_payload_metadata: |\n  if match(.__metadata.s3.key, r\'Digest\') {\n    "digest"\n  } else if match(.__metadata.s3.key, r\'Insights\') {\n    "insights"\n  } else {\n    "default"\n  }\n')))}p.isMDXComponent=!0}}]);